# cmake/_Dependencies.cmake is generated by `mulle-sde`. Edits will be lost.
#
if( MULLE_TRACE_INCLUDE)
   message( STATUS "# Include \"${CMAKE_CURRENT_LIST_FILE}\"" )
endif()

if( NOT MULLE_ABA_LIBRARY)
   find_library( MULLE_ABA_LIBRARY NAMES ${CMAKE_STATIC_LIBRARY_PREFIX}mulle-aba${CMAKE_STATIC_LIBRARY_SUFFIX} mulle-aba)
   message( STATUS "MULLE_ABA_LIBRARY is ${MULLE_ABA_LIBRARY}")

   # the order looks ascending, but due to the way this file is read
   # it ends up being descending, which is what we need
   if( MULLE_ABA_LIBRARY)
      set( DEPENDENCY_LIBRARIES
         ${DEPENDENCY_LIBRARIES}
         ${MULLE_ABA_LIBRARY}
         CACHE INTERNAL "need to cache this"
      )
      # temporarily expand CMAKE_MODULE_PATH
      get_filename_component( _TMP_MULLE_ABA_ROOT "${MULLE_ABA_LIBRARY}" DIRECTORY)
      get_filename_component( _TMP_MULLE_ABA_ROOT "${_TMP_MULLE_ABA_ROOT}" DIRECTORY)

      # search for DependenciesAndLibraries.cmake to include
      foreach( _TMP_MULLE_ABA_NAME in mulle-aba)
         set( _TMP_MULLE_ABA_DIR "${_TMP_MULLE_ABA_ROOT}/include/${_TMP_MULLE_ABA_NAME}/cmake")
         # use explicit path to avoid "surprises"
         if( EXISTS "${_TMP_MULLE_ABA_DIR}/DependenciesAndLibraries.cmake")
            unset( MULLE_ABA_DEFINITIONS)
            list( INSERT CMAKE_MODULE_PATH 0 "${_TMP_MULLE_ABA_DIR}")
            include( "${_TMP_MULLE_ABA_DIR}/DependenciesAndLibraries.cmake")
            list( REMOVE_ITEM CMAKE_MODULE_PATH "${_TMP_MULLE_ABA_DIR}")
            set( INHERITED_DEFINITIONS
               ${INHERITED_DEFINITIONS}
               ${MULLE_ABA_DEFINITIONS}
               CACHE INTERNAL "need to cache this"
            )
            break()
         endif()
      endforeach()
   else()
      message( FATAL_ERROR "MULLE_ABA_LIBRARY was not found")
   endif()
endif()
